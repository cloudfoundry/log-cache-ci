resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest
- name: gcs-resource
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: cf-deployment-concourse-tasks-image
  type: docker-image
  source:
    repository: relintdockerhubpushbot/cf-deployment-concourse-tasks
    tag: v5.24.0

- name: p-metric-store-dev-release
  type: gcs-resource
  source:
    bucket: log-cache-ci-notifications
    json_key: ((release-credentials.yml/Notes/gcp-service-account-key))
    regexp: metric-store-dev-releases/release-(.*).tgz

- name: log-cache-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache-ci
    branch: master
    private_key: ((github-key-ci.yml/Notes/github_key))

- name: log-cache-deployments
  type: git
  source:
    uri: git@github.com:cloudfoundry/log-cache-deployments
    branch: master
    private_key: ((github-key-ci.yml/Notes/github_key))

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack-ci.yml/Notes/slack_alert_webhook_url))

- name: nightly
  type: time
  source:
    interval: 24h
    start: 6 AM
    stop: 7 AM
    location: America/Denver

- name: every-23-hours
  type: time
  source:
    interval: 23h

jobs:
- name: metric-store-edge-deploy
  serial: true
  plan:
  - put: slack-alert
    params:
      silent: true
      username: ((slack-ci.yml/Notes/slack_alert_username))
      icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
      channel: ((slack-ci.yml/Notes/slack_alert_channel))
      text: ":yellow_heart: Started :metric: Metric Store deployment to :knife: PWS Edge"
  - aggregate:
    - get: cf-deployment-concourse-tasks-image
    - get: p-metric-store-dev-release
      trigger: true
    - get: log-cache-ci
    - get: log-cache-deployments
  - task: upload-p-metric-store-release
    file: log-cache-ci/tasks/upload-dev-release/task.yml
    image: cf-deployment-concourse-tasks-image
    input_mapping:
      bosh-release-tarball: p-metric-store-dev-release
    params:
      BOSH_CA_CERT: ((bosh-ca-cert.certificate))
      BOSH_CLIENT: ((bosh-admin-client.username))
      BOSH_CLIENT_SECRET: ((bosh-admin-client.password))
      BOSH_ENVIRONMENT: bosh.run.pivotal.io
  - task: deploy
    image: cf-deployment-concourse-tasks-image
    config:
      platform: linux
      params:
        BOSH_CA_CERT: ((bosh-ca-cert.certificate))
        BOSH_CLIENT: ((bosh-admin-client.username))
        BOSH_CLIENT_SECRET: ((bosh-admin-client.password))
        BOSH_ENVIRONMENT: bosh.run.pivotal.io
        BOSH_DEPLOYMENT: metric-store-edge
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -eux

          bosh \
            deploy "log-cache-deployments/pws/edge/metric-store-edge-manifest.yml" \
            --non-interactive
      inputs:
      - name: log-cache-deployments
  on_success:
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_alert_channel))
        text: ":green_heart: Finished :metric: Metric Store deployment to :knife: PWS Edge"
  on_failure:
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_alert_channel))
        text: ":broken_heart: Failed to deploy :metric: Metric Store: to :knife: PWS Edge
          Details here: https://log-cache.ci.cf-app.com/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"

- name: blackbox-deploy
  serial: true
  plan:
  - aggregate:
    - get: cf-deployment-concourse-tasks-image
    - get: p-metric-store-dev-release
      passed: [metric-store-edge-deploy]
      trigger: true
    - get: log-cache-ci
    - get: log-cache-deployments
  - aggregate:
    - task: upload-p-metric-store-release
      file: log-cache-ci/tasks/upload-dev-release/task.yml
      image: cf-deployment-concourse-tasks-image
      input_mapping:
        bosh-release-tarball: p-metric-store-dev-release
      params:
        BOSH_CA_CERT: ((bosh-ca-cert.certificate))
        BOSH_CLIENT: ((bosh-admin-client.username))
        BOSH_CLIENT_SECRET: ((bosh-admin-client.password))
        BOSH_ENVIRONMENT: bosh.run.pivotal.io
        JSON_KEY: ((release-credentials.yml/Notes/gcp-service-account-key))
        FORCE: true
        RECORD_SHAS: true
  - task: metric-store-edge-blackbox-deploy
    image: cf-deployment-concourse-tasks-image
    config:
      platform: linux
      inputs:
      - name: p-metric-store-dev-release
      - name: log-cache-deployments
      params:
        DEPLOYMENT_NAME: metric-store-edge-blackbox
        MANIFEST_FILE: manifests/metric-store-blackbox.yml
        SECRETS_FILE: shared-secrets.yml
        BOSH_CLIENT: ((bosh-admin-client.username))
        BOSH_CLIENT_SECRET: ((bosh-admin-client.password))
        BOSH_CA_CERT: ((bosh-ca-cert.certificate))
        BOSH_ENVIRONMENT: bosh.run.pivotal.io
        DATADOG_API_KEY: ((datadog-api-key-pws.yml/Notes/datadog_api_key))
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -eux

          cat > on-the-fly.yml <<EOF
          - type: replace
            path: /name
            value: "metric-store-edge-blackbox"
          - type: replace
            path: /instance_groups/name=metric-store-blackbox/azs
            value: [z2, z3]
          - type: replace
            path: /instance_groups/name=metric-store-blackbox/instances
            value: 2
          - type: replace
            path: /instance_groups/name=metric-store-blackbox/networks
            value: [{name: pws-cf}]
          - type: replace
            path: /instance_groups/name=metric-store-blackbox/jobs/name=metric-store-blackbox/consumes
            value:
              metric-store: {from: metric-store-edge, deployment: metric-store-edge}
              cloud_controller: {from: cloud_controller, deployment: cf-cfapps-io2}
          - type: replace
            path: /instance_groups/name=metric-store-blackbox/jobs/name=metric-store-blackbox/properties?
            value:
              source_id: metric-store-edge
              cf_blackbox:
                enabled: true
                metric_store_address: https://metric-store-edge.run.pivotal.io
                client_id: ((pws-datadog-forwarder-client/Username))
                client_secret: ((pws-datadog-forwarder-client/Password))
          EOF

          bosh \
            deploy "metric-store-release/$MANIFEST_FILE" \
            --deployment "$DEPLOYMENT_NAME" \
            --non-interactive \
            --ops-file on-the-fly.yml

- name: metric-store-edge-nightly-redeploy
  serial_groups: [chaos]
  plan:
  - put: slack-alert
    params:
      silent: true
      username: ((slack-ci.yml/Notes/slack_alert_username))
      icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
      channel: ((slack-ci.yml/Notes/slack_alert_channel))
      text: ":monkey: Starting nightly :metric: Metric Store Edge redeployment"
  - aggregate:
    - get: cf-deployment-concourse-tasks-image
    - get: p-metric-store-dev-release
      passed: [blackbox-deploy]
    - get: nightly
      trigger: true
  - task: redeploy
    image: cf-deployment-concourse-tasks-image
    config:
      platform: linux
      params:
        BOSH_CA_CERT: ((bosh-ca-cert.certificate))
        BOSH_CLIENT: ((bosh-admin-client.username))
        BOSH_CLIENT_SECRET: ((bosh-admin-client.password))
        BOSH_ENVIRONMENT: bosh.run.pivotal.io
        BOSH_DEPLOYMENT: metric-store-edge
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -eux

          bosh manifest > manifest.yml
          bosh deploy --non-interactive --recreate manifest.yml
  on_success:
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_alert_channel))
        text: ":green_heart: Finished nightly :metric: Metric Store Edge redeployment"
  on_failure:
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_alert_channel))
        text: ":broken_heart: Failed nightly :metric: Metric Store Edge redeployment
          Details here: https://log-cache.ci.cf-app.com/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"

- name: metric-store-edge-kill-vm
  serial_groups: [chaos]
  plan:
  - put: slack-alert
    params:
      silent: true
      username: ((slack-ci.yml/Notes/slack_alert_username))
      icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
      channel: ((slack-ci.yml/Notes/slack_alert_channel))
      text: ":monkey: Killing a :metric: Metric Store Edge vm"
  - aggregate:
    - get: cf-deployment-concourse-tasks-image
    - get: p-metric-store-dev-release
      passed: [blackbox-deploy]
    - get: every-23-hours
      trigger: true
  - task: kill-vm
    image: cf-deployment-concourse-tasks-image
    config:
      platform: linux
      params:
        BOSH_CA_CERT: ((bosh-ca-cert.certificate))
        BOSH_CLIENT: ((bosh-admin-client.username))
        BOSH_CLIENT_SECRET: ((bosh-admin-client.password))
        BOSH_ENVIRONMENT: bosh.run.pivotal.io
        BOSH_DEPLOYMENT: metric-store-edge
        VM_OFFLINE_DURATION: 5m
      run:
        path: bash
        args:
        - -c
        - |
          #!/bin/bash
          set -eux

          vm_to_stop="$(bosh vms |
            grep 'metric-store/' |
            sort -R |
            head -n 1 |
            awk '{print $1}')"

          bosh \
            stop "${vm_to_stop}" \
            --soft --skip-drain \
            --non-interactive

          sleep ${VM_OFFLINE_DURATION}

          bosh \
            start "${vm_to_stop}" \
            --non-interactive
  on_success:
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_alert_channel))
        text: ":green_heart: Finished killing and restarting a :metric: Metric Store Edge vm"
  on_failure:
    do:
    - put: slack-alert
      params:
        silent: true
        username: ((slack-ci.yml/Notes/slack_alert_username))
        icon_url: ((slack-ci.yml/Notes/slack_alert_icon_url))
        channel: ((slack-ci.yml/Notes/slack_alert_channel))
        text: ":broken_heart: Failed to kill a :metric: Metric Store Edge vm
          Details here: https://log-cache.ci.cf-app.com/teams/main/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME"
