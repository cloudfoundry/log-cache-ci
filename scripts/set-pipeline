#!/bin/bash

set -e

function warning {
  YELLOW='\033[0;33m'
  BOLD='\033[1m'
  CLEAR='\033[0m'
  local message=${1}

  echo -e "${YELLOW}${BOLD}${message}${CLEAR}"
}

function error {
  RED='\033[0;31m'
  BOLD='\033[1m'
  CLEAR='\033[0m'
  local message=${1}

  echo -e "${RED}${BOLD}${message}${CLEAR}"
}

function success {
  GREEN='\033[0;32m'
  BOLD='\033[1m'
  CLEAR='\033[0m'
  local message=${1}

  echo -e "${GREEN}${BOLD}${message}${CLEAR}"
}

function step {
    local message=${1}
    printf "%-46s ... " "${message}"
}

function step_ok {
    local message=${1}
    success "[OK] ${message}"
}

function step_error {
    local message=${1}
    error "[ERROR] ${message}"
    echo
}

function step_info {
    local message=${1}
    warning "[INFO] ${message}"
    echo
}

function fail {
    local message=${1}
    warning "> ${message}"
    exit 1
}

function info_block {
    local message=${1}
    local command=${2}

    warning "-- start of ${message} --"
    eval "${command}"
    warning "-- end of ${message} --"
    echo
}

function error_block {
    local message=${1}
    local command=${2}

    error "-- start of ${message} errors --"
    set +e
    eval "${command}"
    set -e
    error "-- end of ${message} errors --"
    echo
}

function check_lpass {
    step "Checking LastPass"

    set +e
    lpass_status=$(lpass status --color=never)
    lpass_logged_in=$?
    set -e

    if [ $lpass_logged_in -eq 0 ]; then
        step_ok "${lpass_status}"
    else
        step_error "${lpass_status}"
        fail "please login to LastPass and try again"
    fi
}

function find_pipeline {
    step "Finding pipeline"
    query=${1}
    pipeline_dir='pipelines/'

    pushd ${pipeline_dir} > /dev/null
        top_level_pipelines=()
        other_pipelines=()

        while IFS=  read -r -d $'\n'; do
            normalized_pipeline=`echo ${REPLY} | cut -c 3-`
            top_level_pipelines+=("$normalized_pipeline")
        done < <(find . -maxdepth 1 -type f \( ! -name . \) | sort)

        while IFS=  read -r -d $'\0'; do
            normalized_pipeline=`echo ${REPLY} | cut -c 3-`
            other_pipelines+=($normalized_pipeline)
        done < <(find . -mindepth 2 -type f \( ! -name . \) -print0)
    popd > /dev/null

    pipeline=''

    if [[ ${query} != '' ]]; then
        # top level pipeline starts with query
        for p in "${top_level_pipelines[@]}"; do
            if [[ "${p}" == "${query}"* ]]; then
                pipeline=${p}
            fi
        done

        # top level pipeline substring matches query
        if [[ ${pipeline} = '' ]]; then
            for p in "${top_level_pipelines[@]}"; do
                if [[ "${p}" =~ "${query}" ]]; then
                    pipeline=${p}
                fi
            done
        fi

        # any pipeline substring matches query
        matching_pipelines=()
        if [[ ${pipeline} = '' ]]; then
            for p in "${other_pipelines[@]}"; do
                if [[ "${p}" =~ "${query}" ]]; then
                    matching_pipelines+=("${p}")
                fi
            done
        fi
    fi

    if [[ ${pipeline} = '' ]]; then
        if [[ ${#matching_pipelines[@]} -eq 1 ]]; then
            pipeline=${matching_pipelines[0]}
        elif [[ ${#matching_pipelines[@]} -eq 0 ]]; then
            step_error "found 0 matches for '${query}'"

            echo "Available pipelines are:"
            for p in "${top_level_pipelines[@]}"; do
                echo " - ${p}"
            done
            for p in "${other_pipelines[@]}"; do
                echo " - ${p}"
            done
            echo

            fail "Please adjust your query to match an available pipeline and try again"
        else
            step_error "found ${#matching_pipelines[@]} matches for '${query}'"

            echo "Matching pipelines were:"
            for p in "${matching_pipelines[@]}"; do
                echo " - ${p}"
            done
            echo

            fail "Please adjust your query to match a specific pipeline and try again"
        fi
    fi

    step_ok "found ${pipeline}"

    config_path=${pipeline_dir}${pipeline}

    if [[ "$pipeline" == pws* ]]; then
        TARGET="${TARGET:-pws}"
    else
        TARGET="${TARGET:-log-cache}"
    fi

    pipeline_name=$(echo "${pipeline}" | sed 's/\//-/g' | sed 's/.yml//' | sed 's/.erb//')
}

function validate_usage {
    if [ "$pipeline" = "-h" ] || [ "$pipeline" = "--help" ] || [ -z "$pipeline" ]; then
        print_usage
        exit 1
    fi
}

function validate_pipeline {
    step "Validating '${pipeline_name}' pipeline"

    set +e
    pipeline_validation=$(fly -t ${TARGET} validate-pipeline -c ${config_path} 2>&1)
    pipeline_valid=$?
    set -e

    if [ $pipeline_valid -eq 0 ]; then
        step_ok "valid"
    else
        step_error "invalid"
        error_block "validation" "echo \"${pipeline_validation}\""
        fail "Please fix the above errors and try again"
    fi
}

function login_fly {
    step "Checking fly auth status for '${TARGET}'"

    set +e
    fly_status_output=$(fly -t $TARGET status 2>&1)
    fly_logged_in=$?
    set -e

    if [ $fly_logged_in -eq 0 ]; then
        step_ok "logged in"
    else
        step_info "not logged in"
        info_block "fly login" "fly -t $TARGET login -b"
    fi
}

function check_fly {
    step "Checking fly CLI status for '${TARGET}'"

    set +e
    fly_output=$(fly -t $TARGET get-pipeline -p ${pipeline_name} 2>&1)
    fly_status=$?
    set -e

    if [ $fly_status -eq 0 ]; then
        step_ok "ready to go"
    elif [[ "${fly_output}" =~ "out of sync with the target" ]]; then
        step_info "sync required"
        info_block "sync" "fly -t $TARGET sync"
        login_fly
    else
        step_info "login required"
        info_block "fly login" "fly -t $TARGET login -b"
    fi
}

function preprocess_pipeline {
    if [[ "${pipeline}" == *".erb" ]]; then
        step "Preprocessing erb pipeline"
        tmpfile=$(mktemp)

        set +e
        $(command -v erb >/dev/null 2>&1)
        erb_available=$?
        set -e

        if [ $erb_available -eq 1 ]; then
            step_error "erb not found"
            fail "To process .erb pipelines, erb is required but not installed."
        fi

        set +e
        erb_output=$(erb ${config_path} > ${tmpfile} 2>&1)
        erb_processed=$?
        set -e

        if [ $erb_processed -eq 0 ]; then
            step_ok "processed"
            config_path=${tmpfile}
        else
            step_error "erb failed"
            error_block "erb" "erb ${config_path} > ${tmpfile}"
            fail "please fix the erb errors then try again"
        fi
    fi
}

function reconfigure_pipeline {
    reconfigure-pipeline \
      --target ${TARGET} \
      --pipeline ${pipeline_name} \
      --config ${config_path} \
      --load-vars-from config/env-config.yml
}

function fly_pipeline {
    step "Reconfiguring '${pipeline_name}' pipeline"

    set +e
    (echo "N" | reconfigure_pipeline | grep -Fxq "no changes to apply")
    no_changes=$?
    set -e

    if [ $no_changes -eq 0 ]; then
        step_ok "no changes to apply"
    else
        step_info "there are changes to apply"
        warning_block "changes" reconfigure_pipeline
    fi
}

function print_usage {
    echo "usage: $0 <pipeline>"
    echo " - where <pipeline> can be a substring of available pipeline paths"
}

function deprecation_warning {
    query=${1}

    if [[ "${query}" = "log-cache" ]]; then
        fail "the log-cache pipeline was renamed to acceptance.  Try that one instead ;)"
    fi
}

function cleanup {
    if [[ "${pipeline}" == *".erb" ]]; then
        rm ${tmpfile}
    fi
}

function main {
    deprecation_warning $1
    check_lpass
    find_pipeline $1
    validate_usage
    check_fly
    preprocess_pipeline
    validate_pipeline

    if [ $? -eq 0 ]; then
        fly_pipeline
    fi

    cleanup

    success "DONE!"
}

main $1
