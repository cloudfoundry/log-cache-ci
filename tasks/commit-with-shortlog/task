#!/usr/bin/env ruby

class Committer
  def initialize(paths)
    @paths = paths.split(" ")
    puts "Paths to be committed #{@paths}"
  end

  def run
    copy_release_dir

    if has_diff?
      stage_paths
      commit(build_message(find_shas))

      if has_diff?
        puts "uncommited code still present after commit"
        exit(1)
      end
    end

    puts "No diff present"
  end

  def has_diff?
    `git diff-index --quiet HEAD`
    process = $?
    !process.success?
  end

  def stage_paths
    @paths.each { |p| `git add #{p}` }
  end

  def find_shas
    diffs = must("git diff --cached").split('diff --git').select do |log|
      log =~ /Subproject/
    end

    locations = {}
    diffs.each do |diff|
      /a\/(?<loc>.+?)\sb.*index\s(?<shas>\S+)/m.match diff do |matches|
        locations[matches[:loc]] = matches[:shas]
      end
    end

    locations
  end

  def build_message(locations)
    commit_msg = ["Bump #{locations.keys.join(", ")}\n"]

    locations.each do |location, shas|
      Dir.chdir(location) do
        commit_messages_by_author = Hash.new([])
        must("git log #{shas} --pretty=format:'%h %an: %s'").split("\n").each do |commit|
          _sha, rest_of_commit = commit.split(" ", 2)
          author, message = rest_of_commit.split(":", 2)
          commit_messages_by_author[author] += [message]
        end

        commit_messages_by_author.each do |author, messages|
          commit_msg << "  #{author}:"
          messages.each { |message| commit_msg << "    #{message}" }
        end
      end
    end

    commit_msg.join("\n")
  end

  def commit(msg)
    must("git config --global user.email 'cf-log-cache@pivotal.io>'")
    must("git config --global user.name 'Log Cache CI'")
    must("git commit -m '#{msg}'")
  end

  def copy_release_dir
    must("cp -r ../release-repo/. .")
  end

  def must(cmd)
    out = exec(cmd)
    $? != 0 ? exit($?) : out
  end
end

Committer.new(ENV["PATHS"]).run
