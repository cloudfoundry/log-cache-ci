#!/bin/bash

# vi:syntax=sh

set -ex

new_version=`cat log-cache-release-version-backport/version`
tag_name="v${new_version}"

echo "Log Cache ${new_version}" > github-release/name
echo ${tag_name} > github-release/tag
echo "TBD" > github-release/body

pushd log-cache-release-backport
  git checkout "${BACKPORT_BRANCH}"

  # commit version bump
  echo $new_version > src/version
  git add .
  git commit -m "Bump version to ${new_version}"

  # create release
  cat << EOF > config/private.yml
---
blobstore:
  options:
    credentials_source: static
    json_key: |
      $(echo ${JSON_KEY})
EOF

  bosh -n create-release --sha2 --final \
    --tarball ../github-release/release.tgz \
    --version "${new_version}"

  # commit release creation changes
  git add .
  git commit -m "Create final backport release"

  backport_release_abbrev=$(git rev-parse --abbrev-ref HEAD)

  git tag "${tag_name}" HEAD

  cp -r . ../log-cache-release-backport-modified
popd

pushd log-cache-release-develop
  git checkout develop
  git remote add -f local_backport ../log-cache-release-backport

  set +e
  git cherry-pick "local_backport/${backport_release_abbrev}"
  cherry_pick_status=$?
  set -e

  if [ $cherry_pick_status -eq 0 ]; then
    git commit --amend -m "Merge final backport ${new_version} release artifacts"
  else
    for f in $(git diff --name-only --diff-filter=U); do
      cp ${f} ${f}.temp
      grep -vwE "(<<<<<<< HEAD|=======|>>>>>>>)" ${f}.temp > ${f}
      git add ${f}
    done

    git commit -m "Merge final backport ${new_version} release artifacts"
  fi

  cp -r . ../log-cache-release-develop-modified
popd
